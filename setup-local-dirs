#!/usr/bin/perl
$| = 1;

# Try a uname based approach first
# Simplistic but sufficient for now
my $osdir = "";
my $uname = `uname -a`;

if ( $uname =~ /\.((fc|el)\d+\.(x86_64|i\d+))/ ) {
    $osdir = $1;
}
else {
    die;
}
$osdir =~ s/\./-/go;

print "Be sure to 'git pull' to update to latest code.\n";

if ( !-e "/local/apache/conf-$osdir" ) {
    print "No OS config dir for ($osdir).\n";
    exit;
}

print "Using OS Dir: $osdir\n";
print "Scanning for local apache directories to update...\n";

my %ca_map  = ();
my $ca_base = "/local/apache/ca-certs";
opendir( my $dir, $ca_base );
while ( my $file = readdir($dir) ) {
    next if ( $file eq "." || $file eq ".." );

    open( my $in, "-|" ) || exec( "openssl", "x509", "-in" => "$ca_base/$file", "-subject", "-noout" );
    while ( defined( my $line = <$in> ) ) {
        if ( $line =~ /subject=\s*(.*?)\s*$/o ) {
            my $pname = $1;
            $pname =~ s|.*/|.../|go;
            print "Loaded CA ($pname) from ${ca_base}/${file}\n";
            $ca_map{$1} = "${ca_base}/${file}";
        }
    }
    close($in);
}
closedir($dir);

opendir( DIR, "/local" );
while ( $file = readdir(DIR) ) {
    if ( $file eq "apache-root" || $file =~ /apache-root-.*/ ) {
        if ( !-e "/local/$file/conf/httpd.conf" ) {
            print "$file must not be a server install, no httpd.conf\n";
            next;
        }

        print "Found install at: /local/$file\n";

        $user = undef;
        open( IN, "/local/$file/conf/httpd.conf" );
        while ( $line = <IN> ) {
            if ( $line =~ /User\s+(.*?)\s*$/o ) {
                $user = $1;
            }
        }
        close(IN);

        if ( $user eq "" ) {
            die "Unable to determine user for /local/$file.\n";
        }

        print "Overwriting common config files in /local/$file/conf.\n";
        system("cp -v /local/apache/conf-$osdir/* /local/$file/conf/");

        print "Updating CA chain.crt file.\n";
        system("mkdir -p /local/$file/ssl");

        print "Determining chain crt to populate based on httpd.crt:\n";
        my @certs_to_add = ();
        if ( -e "/local/$file/ssl/httpd.crt" ) {
            if ( -e "/local/$file/ssl/httpd-chain.crt" ) {
                push( @certs_to_add, "/local/$file/ssl/httpd-chain.crt" );
            }

            open( my $in, "-|" ) || exec(
                "openssl", "x509",
                "-in" => "/local/$file/ssl/httpd.crt",
                "-issuer", "-noout"
            );
            while ( defined( my $line = <$in> ) ) {
                if ( $line =~ /issuer=\s*(.*?)\s*$/o ) {
                    if ( $ca_map{$1} ) {
                        push( @certs_to_add, $ca_map{$1} );
                    }
                }
            }
            close($in);
        }

        # Insure it's not empty, otherwise error on startup
        if ( scalar(@certs_to_add) == 0 && -e "/local/$file/ssl/httpd.crt" ) {
            push( @certs_to_add, "/local/$file/ssl/httpd.crt" );
        }

        open( my $out, ">/local/$file/ssl/chain.crt" );
        foreach my $file (@certs_to_add) {
            print "  Merging $file...\n";
            open( my $in, "<$file" );
            while ( defined( my $line = <$in> ) ) {
                print $out $line;
            }
            close($in);
            print $out "\n";
        }
        close($out);

        print "Fixing perms for /local/$file for user $user.\n";
        &fix_perms( "/local/$file", $user );

        print "Updating scripts for /local/$file.\n";
        &setup_scripts("/local/$file");

        print "Removing any existing local-modules dir.\n";
        &mysystem("rm -rf /local/$file/local-modules");
    }
}

unlink("/home/local/adm/rc-start/rc.500.httpd");
open( OUT, ">/home/local/adm/rc-start/rc.500.httpd" );
print OUT "#!/bin/sh\n";
print OUT "/local/apache/stop-all\n";
print OUT "/local/apache/start-all\n";
close(OUT);
system("chmod 755 /home/local/adm/rc-start/rc.500.httpd");

unlink("/home/local/adm/rc-stop/rc.500.httpd");
open( OUT, ">/home/local/adm/rc-stop/rc.500.httpd" );
print OUT "#!/bin/sh\n";
print OUT "/local/apache/stop-all\n";
close(OUT);
system("chmod 755 /home/local/adm/rc-stop/rc.500.httpd");

sub mysystem {
    my ($cmd) = @_;
    print "+ $cmd\n";
    system($cmd);
}

sub fix_perms {
    my ( $dir, $user ) = @_;

    &mysystem("chown -R root:root $dir");
    &mysystem("chown -R $user:$user $dir/logs");
    &mysystem("chown -R $user:$user $dir/htdocs*");
    &mysystem("mkdir -p $dir/logs");
    &mysystem("chown root:root $dir/logs");
    &mysystem("chown root:root $dir/logs/pidfile");
    &mysystem("chmod -R go-rwx $dir");

    my @pats = glob("$dir/*cgi*");
    if ( $#pats >= 0 ) {
        &mysystem("chmod -R go+rx $dir/*cgi*");
    }

    my @pats = glob("$dir/*cgi*/*cgiwrap*");
    if ( $#pats >= 0 ) {
        &mysystem("chown root:root $dir/*cgi*/*cgiwrap*");
        &mysystem("chmod 4755 $dir/*cgi*/*cgiwrap*");
    }

    &mysystem("chmod go+x $dir");
    &mysystem("chmod go+x $dir/logs");

    foreach my $otherdir ( "sessions", "fastcgi", "dav" ) {
        if ( -e "$dir/$otherdir" ) {
            if ( $user eq "" ) {
                die "Cannot set $otherdir permissions, no user specified.\n";
            }
            &mysystem("chown -R $user:$user $dir/$otherdir");
        }
    }
}

sub setup_scripts {
    my ($dir) = @_;

    #
    # First start
    #
    unlink("$dir/start");
    open( OUT, ">$dir/start" );
    print OUT "#!/bin/sh\n";
    print OUT "TZ=UTC\n";
    print OUT "export TZ\n\n";

    print OUT "if [ -e $dir/env.sh ]; then\n";
    print OUT ". $dir/env.sh\n";
    print OUT "fi\n\n";

    my $using_mod_perl = 0;
    open( IN, "$dir/conf/httpd.conf" );
    while ( chomp( $line = <IN> ) ) {
        if ( $line =~ /LoadModule.*mod_perl/o || $line =~ /modperl.conf/o ) {
            $using_mod_perl = 1;
        }
    }
    if ($using_mod_perl) {
        print OUT "export LANG=C\n";
        print OUT "export MALLOC_CHECK_=0\n";
        print OUT "\n";
    }

    print OUT "cd $dir\n";
    print OUT "echo Starting Apache in $dir\n";
    print OUT "/usr/sbin/httpd -d $dir\n";
    close(OUT);
    &mysystem("chmod 700 $dir/start");

    #
    # And stop
    #
    unlink("$dir/stop");
    open( OUT, ">$dir/stop" );
    print OUT "#!/bin/sh\n";
    print OUT "cd $dir\n";
    print OUT "if [ -e logs/pidfile ]; then\n";
    print OUT "echo Stopping Apache in $dir with pid \`cat logs/pidfile\`\n";
    print OUT "touch $dir/logs/TMP\n";
    print OUT "kill \`cat logs/pidfile\`\n";
    print OUT "sleep 2\n";
    print OUT "fi\n";
    print OUT "rm -f $dir/logs/TMP $dir/logs/httpd.mm.* $dir/logs/ssl_mutex* $dir/logs/ssl_scache*\n";
    close(OUT);
    &mysystem("chmod 700 $dir/stop");

    #
    # And restart
    #
    unlink("$dir/restart");
    open( OUT, ">$dir/restart" );
    print OUT "#!/bin/sh\n";
    print OUT "cd $dir\n";
    print OUT "./stop\n";
    print OUT "sleep 1\n";
    print OUT "./start\n";
    close(OUT);
    &mysystem("chmod 700 $dir/restart");

    #
    # And reload
    #
    unlink("$dir/reload");
    open( OUT, ">$dir/reload" );
    print OUT "#!/bin/sh\n";
    print OUT "cd $dir\n";
    print OUT "if [ -e logs/pidfile ]; then\n";
    print OUT "echo Reloading Apache in $dir with pid \`cat logs/pidfile\`\n";
    print OUT "kill -HUP \`cat logs/pidfile\`\n";
    print OUT "fi\n";
    close(OUT);
    &mysystem("chmod 700 $dir/reload");
}
